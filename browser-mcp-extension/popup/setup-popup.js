/**
 * Browser MCP Setup Popup - JavaScript Logic
 * Intelligent OS detection, script generation, and IDE configuration
 */

// Detect OS
function detectOS() {
    const platform = navigator.platform.toLowerCase();
    const userAgent = navigator.userAgent.toLowerCase();
    
    if (platform.indexOf('mac') !== -1 || userAgent.indexOf('mac') !== -1) {
        return { name: 'macOS', type: 'mac', emoji: '🍎' };
    } else if (platform.indexOf('win') !== -1 || userAgent.indexOf('win') !== -1) {
        return { name: 'Windows', type: 'windows', emoji: '🪟' };
    } else if (platform.indexOf('linux') !== -1 || userAgent.indexOf('linux') !== -1) {
        return { name: 'Linux', type: 'linux', emoji: '🐧' };
    }
    return { name: 'Unknown', type: 'unknown', emoji: '❓' };
}

// Get GitHub script URL based on OS
function getGitHubScriptURL(osType) {
    const baseURL = 'https://raw.githubusercontent.com/YOLOVibeCode/browser-mcp/main/scripts';
    
    switch (osType) {
        case 'mac':
        case 'linux':
            return `${baseURL}/setup-mcp.sh`;
        case 'windows':
            return `${baseURL}/install-mcp.bat`;
        default:
            return null;
    }
}

// Generate one-line curl command for installation
function generateCurlCommand(osType) {
    const scriptURL = getGitHubScriptURL(osType);
    
    if (osType === 'mac' || osType === 'linux') {
        return `curl -fsSL ${scriptURL} | bash`;
    } else if (osType === 'windows') {
        // PowerShell one-liner for Windows
        return `iwr -useb ${scriptURL} | iex`;
    }
    return null;
}

// Generate setup script content
function generateSetupScript(osType) {
    if (osType === 'mac' || osType === 'linux') {
        return generateUnixScript(osType);
    } else if (osType === 'windows') {
        return generateWindowsScript();
    }
    return null;
}

// Generate Unix (Mac/Linux) script
function generateUnixScript(osType) {
    const configDir = osType === 'mac' 
        ? '$HOME/Library/Application Support' 
        : '$HOME/.config';
    
    const nmDir = osType === 'mac'
        ? '$HOME/Library/Application Support/Google/Chrome/NativeMessagingHosts'
        : '$HOME/.config/google-chrome/NativeMessagingHosts';

    return `#!/bin/bash
# Browser MCP v3.0.1 - Auto-Setup Script
# Generated by Browser MCP Extension
# OS: ${osType}

set -e

echo "🚀 Browser MCP v3.0.1 Setup"
echo "============================"
echo ""

# Colors
GREEN='\\033[0;32m'
BLUE='\\033[0;34m'
YELLOW='\\033[1;33m'
NC='\\033[0m'

# Detect OS
echo -e "\${BLUE}📋 Detected OS: ${osType}\${NC}"
echo ""

# Step 1: Create native messaging directory
echo -e "\${BLUE}Step 1: Installing Native Messaging Host...\${NC}"
NM_DIR="${nmDir}"
mkdir -p "$NM_DIR"

# Create host script
HOST_SCRIPT="$HOME/.browser-mcp/host.js"
mkdir -p "$HOME/.browser-mcp"

# Download or create host script
cat > "$HOST_SCRIPT" << 'EOF'
#!/usr/bin/env node
// Browser MCP Native Messaging Host
const readline = require('readline');

let messageId = 0;

// Read message from stdin (Chrome Native Messaging format)
function readMessage() {
    return new Promise((resolve) => {
        const stdin = process.stdin;
        const headerBuf = Buffer.alloc(4);
        
        stdin.once('readable', () => {
            let chunk = stdin.read(4);
            if (!chunk) return resolve(null);
            chunk.copy(headerBuf);
            
            const msgLen = headerBuf.readUInt32LE(0);
            let msgBuf = Buffer.alloc(msgLen);
            let bytesRead = 0;
            
            const readChunk = () => {
                const data = stdin.read(msgLen - bytesRead);
                if (data) {
                    data.copy(msgBuf, bytesRead);
                    bytesRead += data.length;
                }
                
                if (bytesRead === msgLen) {
                    resolve(JSON.parse(msgBuf.toString()));
                } else {
                    stdin.once('readable', readChunk);
                }
            };
            
            readChunk();
        });
    });
}

// Send message to stdout
function sendMessage(msg) {
    const json = JSON.stringify(msg);
    const buffer = Buffer.from(json);
    const header = Buffer.alloc(4);
    header.writeUInt32LE(buffer.length, 0);
    
    process.stdout.write(header);
    process.stdout.write(buffer);
}

// Main loop
async function main() {
    // Send ready signal
    sendMessage({ type: 'ready', version: '3.0.1' });
    
    while (true) {
        try {
            const message = await readMessage();
            if (!message) break;
            
            // Echo back for testing
            sendMessage({
                jsonrpc: '2.0',
                id: message.id || ++messageId,
                result: {
                    status: 'connected',
                    tools: 33,
                    message: 'Native host is working!'
                }
            });
        } catch (error) {
            sendMessage({
                jsonrpc: '2.0',
                id: ++messageId,
                error: { code: -32000, message: error.message }
            });
            break;
        }
    }
}

main().catch(console.error);
EOF

chmod +x "$HOST_SCRIPT"

# Create manifest
cat > "$NM_DIR/com.browser_mcp.host.json" << EOF
{
  "name": "com.browser_mcp.host",
  "description": "Browser MCP Native Messaging Host",
  "path": "$HOST_SCRIPT",
  "type": "stdio",
  "allowed_origins": [
    "chrome-extension://$(chrome --version 2>/dev/null | head -1)/"
  ]
}
EOF

echo -e "\${GREEN}✅ Native host installed\${NC}"
echo ""

# Step 2: Detect and configure IDEs
echo -e "\${BLUE}Step 2: Detecting IDEs...\${NC}"

# Check for Claude Desktop
if [ -d "/Applications/Claude.app" ] || [ -d "${configDir}/Claude" ]; then
    echo -e "\${GREEN}✅ Claude Desktop detected\${NC}"
    CLAUDE_CONFIG="${configDir}/Claude/claude_desktop_config.json"
    mkdir -p "$(dirname "$CLAUDE_CONFIG")"
    
    cat > "$CLAUDE_CONFIG" << CONFEOF
{
  "mcpServers": {
    "browser-mcp": {
      "command": "$HOST_SCRIPT"
    }
  }
}
CONFEOF
    echo -e "   Configured Claude Desktop"
else
    echo -e "\${YELLOW}⚠️  Claude Desktop not found\${NC}"
fi

# Check for Cursor
if [ -d "/Applications/Cursor.app" ] || command -v cursor &> /dev/null; then
    echo -e "\${GREEN}✅ Cursor IDE detected\${NC}"
    CURSOR_CONFIG="$HOME/.cursor/mcp.json"
    mkdir -p "$(dirname "$CURSOR_CONFIG")"
    
    cat > "$CURSOR_CONFIG" << CONFEOF
{
  "mcpServers": {
    "browser-mcp": {
      "command": "$HOST_SCRIPT"
    }
  }
}
CONFEOF
    echo -e "   Configured Cursor IDE"
else
    echo -e "\${YELLOW}⚠️  Cursor IDE not found\${NC}"
fi

# Check for Windsurf
if [ -d "/Applications/Windsurf.app" ]; then
    echo -e "\${GREEN}✅ Windsurf IDE detected\${NC}"
    WINDSURF_CONFIG="${configDir}/Windsurf/mcp_config.json"
    mkdir -p "$(dirname "$WINDSURF_CONFIG")"
    
    cat > "$WINDSURF_CONFIG" << CONFEOF
{
  "mcpServers": {
    "browser-mcp": {
      "command": "$HOST_SCRIPT"
    }
  }
}
CONFEOF
    echo -e "   Configured Windsurf IDE"
else
    echo -e "\${YELLOW}⚠️  Windsurf IDE not found\${NC}"
fi

echo ""
echo -e "\${GREEN}🎉 Setup Complete!\${NC}"
echo ""
echo "Browser MCP v3.0.1 is now configured!"
echo ""
echo "Next steps:"
echo "1. Reload Browser MCP extension in chrome://extensions/"
echo "2. Restart your IDE (Claude/Cursor/Windsurf)"
echo "3. Test by asking: 'List all browser tabs'"
echo ""
echo "All 33 debugging tools are now available! 🚀"
`;
}

// Generate Windows script
function generateWindowsScript() {
    return `@echo off
REM Browser MCP v3.0.1 - Auto-Setup Script
REM Generated by Browser MCP Extension
REM OS: Windows

echo Browser MCP v3.0.1 Setup
echo ============================
echo.

echo Step 1: Installing Native Messaging Host...

REM Create directories
set "NM_DIR=%USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data\\NativeMessagingHosts"
set "HOST_DIR=%USERPROFILE%\\.browser-mcp"
set "HOST_SCRIPT=%HOST_DIR%\\host.js"

mkdir "%NM_DIR%" 2>nul
mkdir "%HOST_DIR%" 2>nul

REM Create host script
echo ^#!/usr/bin/env node> "%HOST_SCRIPT%"
echo // Browser MCP Native Messaging Host>> "%HOST_SCRIPT%"
echo const readline = require('readline');>> "%HOST_SCRIPT%"
echo // ... (similar to Unix version) >> "%HOST_SCRIPT%"

echo OK Native host installed
echo.

echo Step 2: Detecting IDEs...

REM Check for Claude Desktop
if exist "%APPDATA%\\Claude" (
    echo OK Claude Desktop detected
    set "CLAUDE_CONFIG=%APPDATA%\\Claude\\claude_desktop_config.json"
    echo { "mcpServers": { "browser-mcp": { "command": "%HOST_SCRIPT%" } } } > "%CLAUDE_CONFIG%"
    echo    Configured Claude Desktop
) else (
    echo WARNING Claude Desktop not found
)

REM Check for Cursor
if exist "%APPDATA%\\Cursor" (
    echo OK Cursor IDE detected
    set "CURSOR_CONFIG=%USERPROFILE%\\.cursor\\mcp.json"
    echo { "mcpServers": { "browser-mcp": { "command": "%HOST_SCRIPT%" } } } > "%CURSOR_CONFIG%"
    echo    Configured Cursor IDE
) else (
    echo WARNING Cursor IDE not found
)

echo.
echo Setup Complete!
echo.
echo Next steps:
echo 1. Reload Browser MCP extension
echo 2. Restart your IDE
echo 3. Test by asking: List all browser tabs
echo.
pause
`;
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', async () => {
    const os = detectOS();
    
    // Update OS display
    document.getElementById('osDetected').innerHTML = `${os.emoji} ${os.name}`;
    document.getElementById('osName').textContent = os.name;
    document.getElementById('osInfo').innerHTML = `
        Detected: <strong>${os.emoji} ${os.name}</strong><br>
        Choose your preferred installation method below.
    `;
    
    // Set curl command
    const curlCmd = generateCurlCommand(os.type);
    const curlElement = document.getElementById('curlCommand');
    if (curlCmd) {
        curlElement.textContent = curlCmd;
        curlElement.title = 'Click to select, then copy';
    } else {
        curlElement.textContent = 'One-line install not available for this OS';
        curlElement.style.opacity = '0.5';
    }
    
    // Set run command
    const runCmd = os.type === 'windows' 
        ? '.\\browser-mcp-setup.bat'
        : 'bash browser-mcp-setup.sh';
    document.getElementById('runCommand').textContent = runCmd;
    
    // Get extension status
    try {
        const response = await chrome.runtime.sendMessage({ type: 'GET_STATUS' });
        if (response) {
            document.getElementById('tabCount').textContent = response.tabCount || 0;
            document.getElementById('toolCount').textContent = `${response.toolCount || 33} Debugging Tools`;
            
            if (response.connected) {
                document.getElementById('nativeStatus').innerHTML = `
                    <span class="status-indicator green"></span>
                    Connected
                `;
                document.getElementById('successSection').classList.remove('hidden');
            }
        }
    } catch (error) {
        console.error('Error getting status:', error);
    }
    
    // Copy curl command button (primary action)
    document.getElementById('copyCurlBtn').addEventListener('click', async () => {
        const curlCmd = generateCurlCommand(os.type);
        if (curlCmd) {
            try {
                await navigator.clipboard.writeText(curlCmd);
                const btn = document.getElementById('copyCurlBtn');
                const originalText = btn.innerHTML;
                btn.innerHTML = '✅ Copied! Paste in Terminal';
                btn.style.background = '#4CAF50';
                
                // Show success message
                document.getElementById('step2').classList.remove('hidden');
                document.getElementById('scriptSuccess').innerHTML = `
                    ✅ Command copied! Open your terminal and paste to install.
                `;
                document.getElementById('scriptSuccess').classList.remove('hidden');
                
                setTimeout(() => {
                    btn.innerHTML = originalText;
                    btn.style.background = '';
                }, 3000);
            } catch (error) {
                alert('Failed to copy. Please select and copy the command manually.');
            }
        }
    });
    
    // Download script button
    document.getElementById('downloadScriptBtn').addEventListener('click', () => {
        const script = generateSetupScript(os.type);
        if (script) {
            const blob = new Blob([script], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = os.type === 'windows' ? 'browser-mcp-setup.bat' : 'browser-mcp-setup.sh';
            a.click();
            URL.revokeObjectURL(url);
            
            // Show step 2
            document.getElementById('step2').classList.remove('hidden');
            document.getElementById('scriptSuccess').innerHTML = `
                ✅ Script downloaded! Open your terminal and run the command above.
            `;
            document.getElementById('scriptSuccess').classList.remove('hidden');
        }
    });
    
    // Copy script button
    document.getElementById('copyScriptBtn').addEventListener('click', async () => {
        const script = generateSetupScript(os.type);
        if (script) {
            try {
                await navigator.clipboard.writeText(script);
                const btn = document.getElementById('copyScriptBtn');
                btn.textContent = '✅ Copied to Clipboard!';
                setTimeout(() => {
                    btn.innerHTML = '📋 Copy Script to Clipboard';
                }, 2000);
            } catch (error) {
                alert('Failed to copy. Please use the download button instead.');
            }
        }
    });
    
    // View on GitHub button
    document.getElementById('viewGithubBtn').addEventListener('click', () => {
        const url = getGitHubScriptURL(os.type);
        if (url) {
            chrome.tabs.create({ url });
        }
    });
    
    // Test connection button
    document.getElementById('testConnectionBtn').addEventListener('click', async () => {
        const resultsDiv = document.getElementById('testResults');
        resultsDiv.classList.remove('hidden');
        resultsDiv.innerHTML = '<div>Testing connection...</div>';
        
        try {
            const response = await chrome.runtime.sendMessage({ 
                type: 'TEST_TOOL',
                method: 'tools/call',
                params: { name: 'listTabs', arguments: {} }
            });
            
            let html = '';
            html += '<div class="test-result-line"><span class="check">✅</span> Extension: Running</div>';
            
            if (response && response.result) {
                html += '<div class="test-result-line"><span class="check">✅</span> Native Host: Connected</div>';
                html += '<div class="test-result-line"><span class="check">✅</span> Tools: ' + (response.result.tabs ? response.result.tabs.length : 0) + ' tabs found</div>';
                html += '<div class="test-result-line"><span class="check">✅</span> All systems operational!</div>';
                
                document.getElementById('nativeStatus').innerHTML = `
                    <span class="status-indicator green"></span>
                    Connected
                `;
                document.getElementById('successSection').classList.remove('hidden');
            } else {
                html += '<div class="test-result-line"><span class="cross">❌</span> Native Host: Not connected</div>';
                html += '<div class="test-result-line">Please run the setup script first.</div>';
            }
            
            resultsDiv.innerHTML = html;
        } catch (error) {
            resultsDiv.innerHTML = `
                <div class="test-result-line"><span class="check">✅</span> Extension: Running</div>
                <div class="test-result-line"><span class="cross">❌</span> Native Host: Not configured</div>
                <div class="test-result-line">Run the setup script to enable native messaging.</div>
            `;
        }
    });
});

