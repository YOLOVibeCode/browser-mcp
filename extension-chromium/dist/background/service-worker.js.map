{
  "version": 3,
  "sources": ["../../../node_modules/eventemitter3/index.js", "../../../node_modules/eventemitter3/index.mjs", "../../../infrastructure/src/event-bus/EventEmitterBus.ts", "../../../contracts/src/mcp-server/IPortManager.ts", "../../background/BrowserPortManager.ts", "../../../infrastructure/src/tab-management/TabManager.ts", "../../background/ConnectionStatusManager.ts", "../../background/service-worker.ts"],
  "sourcesContent": ["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n", "import EventEmitter from 'eventemitter3';\nimport { IEventBus } from '@browser-mcp/contracts/events';\n\n/**\n * EventEmitter3 implementation of IEventBus.\n * Provides event-driven communication between components.\n */\nexport class EventEmitterBus implements IEventBus {\n  private emitter: EventEmitter;\n\n  constructor() {\n    this.emitter = new EventEmitter();\n  }\n\n  emit<T = unknown>(event: string, payload: T): void {\n    this.emitter.emit(event, payload);\n  }\n\n  on<T = unknown>(event: string, handler: (payload: T) => void): () => void {\n    this.emitter.on(event, handler);\n\n    // Return unsubscribe function\n    return () => {\n      this.emitter.off(event, handler);\n    };\n  }\n\n  once<T = unknown>(event: string, handler: (payload: T) => void): void {\n    this.emitter.once(event, handler);\n  }\n\n  off<T = unknown>(event: string, handler: (payload: T) => void): void {\n    this.emitter.off(event, handler);\n  }\n\n  removeAllListeners(event?: string): void {\n    if (event) {\n      this.emitter.removeAllListeners(event);\n    } else {\n      this.emitter.removeAllListeners();\n    }\n  }\n}\n", "/**\n * Smart port allocation manager.\n * Handles port conflicts, allocation, and release for multi-tab support.\n */\nexport interface IPortManager {\n  /**\n   * Finds an available port in the configured range.\n   * Default range: 3100-3199\n   * Fallback range: 3200-3299\n   * @returns Available port number\n   * @throws {NoAvailablePortError} if no ports available\n   */\n  findAvailablePort(): Promise<number>;\n\n  /**\n   * Checks if a specific port is available.\n   * @param port - Port number to check\n   * @returns true if available, false otherwise\n   */\n  isPortAvailable(port: number): Promise<boolean>;\n\n  /**\n   * Reserves a port for a tab.\n   * @param tabId - Browser tab ID\n   * @param port - Port number\n   * @throws {PortAlreadyReservedError} if port already reserved\n   */\n  reservePort(tabId: number, port: number): void;\n\n  /**\n   * Releases a port from a tab.\n   * @param tabId - Browser tab ID\n   */\n  releasePort(tabId: number): void;\n\n  /**\n   * Gets the port reserved for a tab.\n   * @param tabId - Browser tab ID\n   * @returns Port number or null if not reserved\n   */\n  getPortForTab(tabId: number): number | null;\n\n  /**\n   * Gets the tab ID for a reserved port.\n   * @param port - Port number\n   * @returns Tab ID or null if port not reserved\n   */\n  getTabForPort(port: number): number | null;\n\n  /**\n   * Gets all reserved ports with their tab IDs.\n   * @returns Map of tabId -> port\n   */\n  getAllReservedPorts(): Map<number, number>;\n}\n\n/**\n * Custom errors for port management\n */\nexport class NoAvailablePortError extends Error {\n  constructor(message = 'No available ports in range 3100-3299') {\n    super(message);\n    this.name = 'NoAvailablePortError';\n  }\n}\n\nexport class PortAlreadyReservedError extends Error {\n  constructor(port: number) {\n    super(`Port ${port} is already reserved`);\n    this.name = 'PortAlreadyReservedError';\n  }\n}\n", "/**\n * Browser-compatible Port Manager\n * Uses simple tracking instead of actual port binding\n * (Port binding will happen when MCP server starts)\n */\n\nimport { IPortManager, NoAvailablePortError, PortAlreadyReservedError } from '../../contracts/src/mcp-server/IPortManager';\n\n/**\n * Browser-compatible implementation of IPortManager.\n * Instead of actually binding ports, we track allocated ports\n * and assume they're available (actual binding happens when MCP server starts).\n */\nexport class BrowserPortManager implements IPortManager {\n  private readonly DEFAULT_RANGE: [number, number] = [3100, 3199];\n  private readonly FALLBACK_RANGE: [number, number] = [3200, 3299];\n\n  // Maps: tabId -> port\n  private tabToPort = new Map<number, number>();\n  // Reverse map: port -> tabId\n  private portToTab = new Map<number, number>();\n  // Track which ports we've allocated (to avoid duplicates)\n  private allocatedPorts = new Set<number>();\n\n  async findAvailablePort(): Promise<number> {\n    // Try default range first (3100-3199)\n    for (let port = this.DEFAULT_RANGE[0]; port <= this.DEFAULT_RANGE[1]; port++) {\n      if (!this.allocatedPorts.has(port) && !this.portToTab.has(port)) {\n        return port;\n      }\n    }\n\n    // Fallback to higher range (3200-3299)\n    for (let port = this.FALLBACK_RANGE[0]; port <= this.FALLBACK_RANGE[1]; port++) {\n      if (!this.allocatedPorts.has(port) && !this.portToTab.has(port)) {\n        return port;\n      }\n    }\n\n    throw new NoAvailablePortError();\n  }\n\n  async isPortAvailable(port: number): Promise<boolean> {\n    // Check if port is already reserved internally\n    return !this.portToTab.has(port) && !this.allocatedPorts.has(port);\n  }\n\n  reservePort(tabId: number, port: number): void {\n    // Check if port is already reserved by another tab\n    const existingTabId = this.portToTab.get(port);\n    if (existingTabId !== undefined && existingTabId !== tabId) {\n      throw new PortAlreadyReservedError(port);\n    }\n\n    // Release old port if tab is updating its reservation\n    const oldPort = this.tabToPort.get(tabId);\n    if (oldPort !== undefined && oldPort !== port) {\n      this.portToTab.delete(oldPort);\n      this.allocatedPorts.delete(oldPort);\n    }\n\n    // Reserve port\n    this.tabToPort.set(tabId, port);\n    this.portToTab.set(port, tabId);\n    this.allocatedPorts.add(port);\n  }\n\n  releasePort(tabId: number): void {\n    const port = this.tabToPort.get(tabId);\n    if (port !== undefined) {\n      this.tabToPort.delete(tabId);\n      this.portToTab.delete(port);\n      this.allocatedPorts.delete(port);\n    }\n  }\n\n  getPortForTab(tabId: number): number | null {\n    return this.tabToPort.get(tabId) ?? null;\n  }\n\n  getTabForPort(port: number): number | null {\n    return this.portToTab.get(port) ?? null;\n  }\n\n  getAllReservedPorts(): Map<number, number> {\n    return new Map(this.tabToPort);\n  }\n}\n", "import { ITabManager } from '@browser-mcp/contracts/mcp-server';\nimport { IEventBus, TabActivatedEvent, TabDeactivatedEvent } from '@browser-mcp/contracts/events';\nimport { TabInfo } from '@browser-mcp/contracts/types';\n\n/**\n * Manages active browser tabs and their virtual filesystems.\n * Uses event bus for loose coupling.\n */\nexport class TabManager implements ITabManager {\n  // Map: tabId -> TabInfo\n  private activeTabs = new Map<number, TabInfo>();\n\n  constructor(private eventBus: IEventBus) {}\n\n  async activateTab(tabId: number, url: string, port: number): Promise<void> {\n    const virtualFilesystemURI = this.generateVirtualFilesystemURI(url);\n\n    const tabInfo: TabInfo = {\n      tabId,\n      url,\n      title: '', // Will be populated later when we integrate with browser APIs\n      port,\n      framework: null, // Will be detected later\n      isActive: true,\n      virtualFilesystemURI,\n      activatedAt: Date.now(),\n    };\n\n    this.activeTabs.set(tabId, tabInfo);\n\n    // Emit TabActivated event\n    const event: TabActivatedEvent = {\n      tabId,\n      url,\n      port,\n      timestamp: Date.now(),\n    };\n    this.eventBus.emit('TabActivated', event);\n  }\n\n  async deactivateTab(tabId: number): Promise<void> {\n    const tabInfo = this.activeTabs.get(tabId);\n    if (!tabInfo) {\n      // Idempotent - no error if tab not active\n      return;\n    }\n\n    this.activeTabs.delete(tabId);\n\n    // Emit TabDeactivated event\n    const event: TabDeactivatedEvent = {\n      tabId,\n      timestamp: Date.now(),\n    };\n    this.eventBus.emit('TabDeactivated', event);\n  }\n\n  getTabInfo(tabId: number): TabInfo | null {\n    return this.activeTabs.get(tabId) ?? null;\n  }\n\n  getAllActiveTabs(): TabInfo[] {\n    return Array.from(this.activeTabs.values());\n  }\n\n  isTabActive(tabId: number): boolean {\n    return this.activeTabs.has(tabId);\n  }\n\n  getVirtualFilesystemURI(tabId: number): string | null {\n    const tabInfo = this.activeTabs.get(tabId);\n    return tabInfo?.virtualFilesystemURI ?? null;\n  }\n\n  /**\n   * Generates virtual filesystem URI from tab URL.\n   * Example: http://localhost:3000 -> browser://tab-localhost-3000/\n   * Example: https://example.com -> browser://tab-example-com/\n   */\n  private generateVirtualFilesystemURI(url: string): string {\n    try {\n      const urlObj = new URL(url);\n      // Extract host (hostname:port)\n      let host = urlObj.hostname;\n      if (urlObj.port) {\n        host += `-${urlObj.port}`;\n      }\n      // Replace dots and colons with hyphens for filesystem-safe name\n      const safeName = host.replace(/\\./g, '-').replace(/:/g, '-');\n      return `browser://tab-${safeName}/`;\n    } catch {\n      // Fallback for invalid URLs\n      const safeName = url.replace(/[^a-zA-Z0-9]/g, '-');\n      return `browser://tab-${safeName}/`;\n    }\n  }\n}\n", "/**\n * Connection Status Manager - Pure business logic for managing connection status and badge updates\n * Follows ISP (Interface Segregation Principle) by separating concerns\n */\n\nexport interface IConnectionStatus {\n  hasActiveConnections: boolean;\n  activeTabCount: number;\n}\n\nexport interface IBadgeUpdate {\n  text: string;\n  backgroundColor: string;\n  title: string;\n}\n\n/**\n * Pure function to calculate badge update based on connection status\n * This can be tested without Chrome API dependencies\n */\nexport function calculateBadgeUpdate(status: IConnectionStatus): IBadgeUpdate {\n  if (status.activeTabCount > 0) {\n    const tabText = status.activeTabCount === 1 ? 'tab' : 'tabs';\n    return {\n      text: status.activeTabCount.toString(),\n      backgroundColor: '#28a745', // Green\n      title: `Browser Inspector - ${status.activeTabCount} active ${tabText}`\n    };\n  } else {\n    return {\n      text: '',\n      backgroundColor: '#ff9500', // Orange (not used when text is empty)\n      title: 'Browser Inspector - Not Connected'\n    };\n  }\n}\n\n/**\n * Pure function to determine if we should show connected state\n */\nexport function isConnected(activeTabCount: number): boolean {\n  return activeTabCount > 0;\n}\n\n/**\n * Pure function to format connection status message\n */\nexport function formatConnectionStatus(activeTabCount: number): string {\n  if (activeTabCount === 0) {\n    return 'Not Connected';\n  } else if (activeTabCount === 1) {\n    return 'Connected to 1 tab';\n  } else {\n    return `Connected to ${activeTabCount} tabs`;\n  }\n}\n\n/**\n * Chrome API wrapper - handles actual Chrome API calls\n * This is separated so we can mock it in tests\n */\nexport interface IChromeActionAPI {\n  setBadgeText(details: { text: string }): void;\n  setBadgeBackgroundColor(details: { color: string }): void;\n  setTitle(details: { title: string }): void;\n}\n\n/**\n * Apply badge update to Chrome extension using the API wrapper\n */\nexport function applyBadgeUpdate(update: IBadgeUpdate, chromeAPI: IChromeActionAPI): void {\n  chromeAPI.setBadgeText({ text: update.text });\n  if (update.text !== '') {\n    chromeAPI.setBadgeBackgroundColor({ color: update.backgroundColor });\n  }\n  chromeAPI.setTitle({ title: update.title });\n}\n", "/**\n * Background Service Worker for Browser Inspector Extension\n * Hosts the MCP server and manages tab lifecycle\n */\n\n// Import our infrastructure implementations\n// Note: In production, these would be bundled\nimport EventEmitter from 'eventemitter3';\nimport { IEventBus } from '../../contracts/src/events/IEventBus';\nimport { IPortManager } from '../../contracts/src/mcp-server/IPortManager';\nimport { ITabManager } from '../../contracts/src/mcp-server/ITabManager';\n\n// Import implementations\nimport { EventEmitterBus } from '../../infrastructure/src/event-bus/EventEmitterBus';\nimport { BrowserPortManager } from './BrowserPortManager';\nimport { TabManager } from '../../infrastructure/src/tab-management/TabManager';\n\n// Import connection status manager (ISP-compliant, testable)\nimport {\n  calculateBadgeUpdate,\n  applyBadgeUpdate,\n  type IConnectionStatus,\n  type IChromeActionAPI\n} from './ConnectionStatusManager';\n\n/**\n * Service Worker State\n */\nclass ServiceWorkerState {\n  public eventBus: IEventBus;\n  public portManager: IPortManager;\n  public tabManager: ITabManager;\n\n  constructor() {\n    // Initialize event bus (real EventEmitter3)\n    this.eventBus = new EventEmitterBus();\n\n    // Initialize port manager (browser-compatible version)\n    this.portManager = new BrowserPortManager();\n\n    // Initialize tab manager (with event bus)\n    this.tabManager = new TabManager(this.eventBus);\n\n    // Set up event listeners\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    // Listen to TabActivated events\n    this.eventBus.on('TabActivated', (payload) => {\n      console.log('[Service Worker] Tab activated:', payload);\n    });\n\n    // Listen to TabDeactivated events\n    this.eventBus.on('TabDeactivated', (payload) => {\n      console.log('[Service Worker] Tab deactivated:', payload);\n    });\n\n    // Listen to PortAllocated events\n    this.eventBus.on('PortAllocated', (payload) => {\n      console.log('[Service Worker] Port allocated:', payload);\n    });\n  }\n}\n\n// Global state\nlet state: ServiceWorkerState | null = null;\n\n/**\n * Initialize service worker\n */\nfunction initialize(): void {\n  if (state) return;\n\n  console.log('[Service Worker] Initializing Browser Inspector...');\n  state = new ServiceWorkerState();\n  console.log('[Service Worker] Initialized successfully');\n\n  // Set initial icon to inactive state\n  updateIcon(false);\n}\n\n/**\n * Chrome API wrapper for testing\n */\nconst chromeActionAPI: IChromeActionAPI = {\n  setBadgeText: (details) => chrome.action.setBadgeText(details),\n  setBadgeBackgroundColor: (details) => chrome.action.setBadgeBackgroundColor(details),\n  setTitle: (details) => chrome.action.setTitle(details)\n};\n\n/**\n * Update extension icon based on connection state\n * Now uses ISP-compliant ConnectionStatusManager for testability\n */\nfunction updateIcon(hasActiveConnections: boolean): void {\n  try {\n    const activeTabCount = state?.tabManager.getAllActiveTabs().length || 0;\n    const status: IConnectionStatus = {\n      hasActiveConnections,\n      activeTabCount\n    };\n\n    const badgeUpdate = calculateBadgeUpdate(status);\n    applyBadgeUpdate(badgeUpdate, chromeActionAPI);\n  } catch (err) {\n    console.error('[Service Worker] Error updating icon:', err);\n  }\n}\n\n/**\n * Handle messages from popup or content scripts\n */\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  console.log('[Service Worker] Received message:', message);\n\n  if (!state) {\n    initialize();\n  }\n\n  if (message.type === 'ACTIVATE_TAB') {\n    handleActivateTab(message.payload)\n      .then((result) => sendResponse({ success: true, data: result }))\n      .catch((error) => sendResponse({ success: false, error: error.message }));\n    return true; // Keep channel open for async response\n  }\n\n  if (message.type === 'DEACTIVATE_TAB') {\n    handleDeactivateTab(message.payload)\n      .then(() => sendResponse({ success: true }))\n      .catch((error) => sendResponse({ success: false, error: error.message }));\n    return true;\n  }\n\n  if (message.type === 'GET_TAB_INFO') {\n    const tabInfo = state!.tabManager.getTabInfo(message.payload.tabId);\n    sendResponse({ success: true, data: tabInfo });\n    return false;\n  }\n\n  if (message.type === 'GET_ALL_ACTIVE_TABS') {\n    const tabs = state!.tabManager.getAllActiveTabs();\n    sendResponse({ success: true, data: tabs });\n    return false;\n  }\n\n  sendResponse({ success: false, error: 'Unknown message type' });\n  return false;\n});\n\n/**\n * Handle tab activation request\n */\nasync function handleActivateTab(payload: { tabId: number; url: string }): Promise<any> {\n  if (!state) throw new Error('Service worker not initialized');\n\n  const { tabId, url } = payload;\n\n  // Find available port\n  const port = await state.portManager.findAvailablePort();\n\n  // Reserve port for tab\n  state.portManager.reservePort(tabId, port);\n\n  // Emit PortAllocated event\n  state.eventBus.emit('PortAllocated', {\n    port,\n    tabId,\n    timestamp: Date.now(),\n  });\n\n  // Activate tab\n  await state.tabManager.activateTab(tabId, url, port);\n\n  // Update icon to show active connection\n  updateIcon(true);\n\n  return {\n    port,\n    virtualFilesystemURI: state.tabManager.getVirtualFilesystemURI(tabId),\n  };\n}\n\n/**\n * Handle tab deactivation request\n */\nasync function handleDeactivateTab(payload: { tabId: number }): Promise<void> {\n  if (!state) throw new Error('Service worker not initialized');\n\n  const { tabId } = payload;\n\n  // Deactivate tab\n  await state.tabManager.deactivateTab(tabId);\n\n  // Release port\n  state.portManager.releasePort(tabId);\n\n  // Check if any tabs are still active\n  const activeTabs = state.tabManager.getAllActiveTabs();\n  const hasActiveConnections = activeTabs.length > 0;\n\n  // Update icon based on remaining connections\n  updateIcon(hasActiveConnections);\n}\n\n/**\n * Initialize on service worker startup\n */\ninitialize();\n\nconsole.log('[Service Worker] Browser Inspector loaded');\n"],
  "mappings": "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",
  "names": ["EventEmitter", "EventEmitter"]
}
