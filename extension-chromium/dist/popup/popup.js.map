{
  "version": 3,
  "sources": ["../../popup/popup.ts"],
  "sourcesContent": ["/**\n * Browser MCP Setup Wizard Logic\n */\n\nlet currentStep = 0;\nlet selectedIDE: string | null = null;\n\nconst IDE_CONFIGS = {\n  claude: {\n    name: 'Claude Desktop',\n    path: {\n      mac: '~/Library/Application Support/Claude/claude_desktop_config.json',\n      linux: '~/.config/Claude/claude_desktop_config.json',\n      windows: '%APPDATA%\\\\Claude\\\\claude_desktop_config.json'\n    },\n    config: (extensionPath: string) => ({\n      mcpServers: {\n        'browser-inspector': {\n          command: 'node',\n          args: [extensionPath],\n          env: {\n            NODE_ENV: 'production'\n          }\n        }\n      }\n    })\n  },\n  cursor: {\n    name: 'Cursor',\n    path: {\n      mac: '~/.cursor/mcp.json',\n      linux: '~/.cursor/mcp.json',\n      windows: '%USERPROFILE%\\\\.cursor\\\\mcp.json'\n    },\n    config: (extensionPath: string) => ({\n      mcpServers: {\n        'browser-inspector': {\n          command: 'node',\n          args: [extensionPath],\n          env: {\n            NODE_ENV: 'production'\n          }\n        }\n      }\n    })\n  },\n  windsurf: {\n    name: 'Windsurf',\n    path: {\n      mac: '~/.codeium/windsurf/mcp_config.json',\n      linux: '~/.codeium/windsurf/mcp_config.json',\n      windows: '%APPDATA%\\\\Codeium\\\\windsurf\\\\mcp_config.json'\n    },\n    config: (extensionPath: string) => ({\n      mcpServers: {\n        'browser-inspector': {\n          command: 'node',\n          args: [extensionPath],\n          env: {\n            NODE_ENV: 'production'\n          }\n        }\n      }\n    })\n  }\n};\n\n// Detect OS\nfunction getOS(): 'mac' | 'linux' | 'windows' {\n  const platform = navigator.platform.toLowerCase();\n  if (platform.includes('mac')) return 'mac';\n  if (platform.includes('linux')) return 'linux';\n  return 'windows';\n}\n\n// Get extension installation path from user input or stored value\nfunction getExtensionPath(): string {\n  const projectPathInput = document.getElementById('projectPath') as HTMLInputElement;\n  if (projectPathInput && projectPathInput.value.trim()) {\n    return projectPathInput.value.trim();\n  }\n\n  // Try to get from storage\n  const stored = localStorage.getItem('browserMCP_projectPath');\n  if (stored) {\n    return stored;\n  }\n\n  // Default placeholder\n  return '/path/to/browser-mcp/mcp-server/dist/index.js';\n}\n\n// Auto-detect project path (best effort)\nasync function detectProjectPath() {\n  const projectPathInput = document.getElementById('projectPath') as HTMLInputElement;\n  if (!projectPathInput) return;\n\n  // Common installation paths to try\n  const commonPaths = [\n    '/Users/xcode/Documents/YOLOProjects/browser-mcp/mcp-server/dist/index.js',\n    '~/Documents/browser-mcp/mcp-server/dist/index.js',\n    '~/Projects/browser-mcp/mcp-server/dist/index.js',\n    '~/code/browser-mcp/mcp-server/dist/index.js',\n  ];\n\n  showStatus('info', '\uD83D\uDD0D Trying to detect project path...');\n\n  // For now, just suggest the most likely path\n  const suggested = commonPaths[0];\n  projectPathInput.value = suggested;\n\n  showStatus('info', `\uD83D\uDCA1 Suggested path filled in. Please verify it's correct!`);\n\n  // Store for next time\n  localStorage.setItem('browserMCP_projectPath', suggested);\n\n  // Regenerate config with new path\n  generateConfig();\n}\n\n// Navigation functions\nfunction nextStep() {\n  if (currentStep < 3) {\n    const currentStepEl = document.querySelector(`.step[data-step=\"${currentStep}\"]`);\n    const currentDot = document.querySelector(`.step-dot[data-step=\"${currentStep}\"]`);\n\n    if (currentStepEl) currentStepEl.classList.remove('active');\n    if (currentDot) {\n      currentDot.classList.remove('active');\n      currentDot.classList.add('completed');\n    }\n\n    currentStep++;\n\n    const nextStepEl = document.querySelector(`.step[data-step=\"${currentStep}\"]`);\n    const nextDot = document.querySelector(`.step-dot[data-step=\"${currentStep}\"]`);\n\n    if (nextStepEl) nextStepEl.classList.add('active');\n    if (nextDot) nextDot.classList.add('active');\n\n    // If moving to step 2, generate config\n    if (currentStep === 2 && selectedIDE) {\n      generateConfig();\n    }\n  }\n}\n\nfunction prevStep() {\n  if (currentStep > 0) {\n    const currentStepEl = document.querySelector(`.step[data-step=\"${currentStep}\"]`);\n    const currentDot = document.querySelector(`.step-dot[data-step=\"${currentStep}\"]`);\n\n    if (currentStepEl) currentStepEl.classList.remove('active');\n    if (currentDot) currentDot.classList.remove('active');\n\n    currentStep--;\n\n    const prevStepEl = document.querySelector(`.step[data-step=\"${currentStep}\"]`);\n    const prevDot = document.querySelector(`.step-dot[data-step=\"${currentStep}\"]`);\n\n    if (prevStepEl) prevStepEl.classList.add('active');\n    if (prevDot) {\n      prevDot.classList.add('active');\n      prevDot.classList.remove('completed');\n    }\n  }\n}\n\nfunction resetWizard() {\n  currentStep = 0;\n  selectedIDE = null;\n\n  // Reset all steps\n  document.querySelectorAll('.step').forEach((el, index) => {\n    if (index === 0) {\n      el.classList.add('active');\n    } else {\n      el.classList.remove('active');\n    }\n  });\n\n  // Reset all dots\n  document.querySelectorAll('.step-dot').forEach((el, index) => {\n    el.classList.remove('active', 'completed');\n    if (index === 0) {\n      el.classList.add('active');\n    }\n  });\n\n  // Clear IDE selection\n  document.querySelectorAll('.ide-option').forEach(el => {\n    el.classList.remove('selected');\n  });\n\n  const continueBtn = document.getElementById('continueBtn') as HTMLButtonElement;\n  if (continueBtn) continueBtn.disabled = true;\n}\n\n// IDE selection\nfunction selectIDE(ide: string) {\n  selectedIDE = ide;\n\n  // Update UI\n  document.querySelectorAll('.ide-option').forEach(el => {\n    if (el.getAttribute('data-ide') === ide) {\n      el.classList.add('selected');\n    } else {\n      el.classList.remove('selected');\n    }\n  });\n\n  // Enable continue button\n  const continueBtn = document.getElementById('continueBtn') as HTMLButtonElement;\n  if (continueBtn) continueBtn.disabled = false;\n}\n\n// Generate configuration\nfunction generateConfig() {\n  if (!selectedIDE) return;\n\n  const ideConfig = IDE_CONFIGS[selectedIDE as keyof typeof IDE_CONFIGS];\n  const os = getOS();\n  const extensionPath = getExtensionPath();\n  const defaultPath = ideConfig.path[os];\n\n  // Update config path displays\n  const configPathEl = document.getElementById('configPath');\n  if (configPathEl) {\n    configPathEl.textContent = defaultPath;\n  }\n\n  const defaultConfigPathEl = document.getElementById('defaultConfigPath');\n  if (defaultConfigPathEl) {\n    defaultConfigPathEl.textContent = defaultPath;\n  }\n\n  // Generate config JSON\n  const config = ideConfig.config(extensionPath);\n  const configJSON = JSON.stringify(config, null, 2);\n\n  // Update config content with syntax highlighting\n  const configContentEl = document.getElementById('configContent');\n  if (configContentEl) {\n    configContentEl.innerHTML = `<pre>${escapeHtml(configJSON)}</pre>`;\n  }\n\n  // Update final IDE name\n  const ideNameFinal = document.getElementById('ideNameFinal');\n  if (ideNameFinal) {\n    ideNameFinal.textContent = ideConfig.name;\n  }\n}\n\n// Copy configuration to clipboard\nasync function copyConfig() {\n  if (!selectedIDE) return;\n\n  const ideConfig = IDE_CONFIGS[selectedIDE as keyof typeof IDE_CONFIGS];\n  const extensionPath = getExtensionPath();\n  const config = ideConfig.config(extensionPath);\n  const configJSON = JSON.stringify(config, null, 2);\n\n  try {\n    await navigator.clipboard.writeText(configJSON);\n\n    // Update button text\n    const copyText = document.getElementById('copyText');\n    const copyBtn = document.querySelector('.copy-btn');\n\n    if (copyText) copyText.textContent = '\u2705 Copied!';\n    if (copyBtn) copyBtn.classList.add('copied');\n\n    setTimeout(() => {\n      if (copyText) copyText.textContent = '\uD83D\uDCCB Copy Configuration';\n      if (copyBtn) copyBtn.classList.remove('copied');\n    }, 2000);\n  } catch (err) {\n    console.error('Failed to copy:', err);\n    alert('Failed to copy to clipboard. Please copy manually.');\n  }\n}\n\n// Helper function to escape HTML\nfunction escapeHtml(text: string): string {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n// Track selected configuration method\nlet configMethod: 'auto' | 'manual' = 'auto';\n\n// Switch between auto and manual configuration\nfunction selectConfigMethod(method: 'auto' | 'manual') {\n  configMethod = method;\n\n  // Update UI\n  document.querySelectorAll('.method-option').forEach(el => {\n    if (el.getAttribute('data-method') === method) {\n      el.classList.add('selected');\n    } else {\n      el.classList.remove('selected');\n    }\n  });\n\n  // Show/hide sections\n  const autoSection = document.getElementById('autoConfigSection');\n  const manualSection = document.getElementById('manualConfigSection');\n\n  if (autoSection && manualSection) {\n    if (method === 'auto') {\n      autoSection.style.display = 'block';\n      manualSection.style.display = 'none';\n    } else {\n      autoSection.style.display = 'none';\n      manualSection.style.display = 'block';\n\n      // Generate config for manual section too\n      if (selectedIDE) {\n        const ideConfig = IDE_CONFIGS[selectedIDE as keyof typeof IDE_CONFIGS];\n        const os = getOS();\n        const extensionPath = getExtensionPath();\n\n        const configPathManual = document.getElementById('configPathManual');\n        if (configPathManual) {\n          configPathManual.textContent = ideConfig.path[os];\n        }\n\n        const config = ideConfig.config(extensionPath);\n        const configJSON = JSON.stringify(config, null, 2);\n\n        const configContentManual = document.getElementById('configContentManual');\n        if (configContentManual) {\n          configContentManual.innerHTML = `<pre>${escapeHtml(configJSON)}</pre>`;\n        }\n      }\n    }\n  }\n}\n\n// Fallback to download method if native messaging fails\nfunction fallbackToDownload(config: any, configPath: string, ide: string) {\n  showStatus('info', '\uD83D\uDCA1 Native host not installed. Downloading config file instead...');\n\n  setTimeout(async () => {\n    const configJSON = JSON.stringify(config, null, 2);\n\n    // Download the config file\n    const blob = new Blob([configJSON], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n\n    // Determine filename based on IDE\n    let filename = 'browser-mcp-config.json';\n    if (ide === 'claude') {\n      filename = 'claude_desktop_config.json';\n    } else if (ide === 'cursor') {\n      filename = 'mcp.json';\n    } else if (ide === 'windsurf') {\n      filename = 'mcp_config.json';\n    }\n\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    // Copy path to clipboard for convenience\n    try {\n      await navigator.clipboard.writeText(configPath);\n      showStatus('success', `\u2705 Config downloaded! Path copied to clipboard:\\n\uD83D\uDCC1 ${configPath}\\n\\nMove the downloaded file to that location.\\n\\n\uD83D\uDCA1 Tip: Install native host for automatic writing!`);\n    } catch {\n      showStatus('success', `\u2705 Config downloaded as \"${filename}\"!\\n\\nMove it to: ${configPath}\\n\\n\uD83D\uDCA1 Tip: Install native host for automatic writing!`);\n    }\n\n    // Auto-advance after showing the message\n    setTimeout(() => {\n      nextStep();\n    }, 4000);\n  }, 500);\n}\n\n// Browse for file path\nasync function browseFilePath() {\n  showStatus('info', 'Note: Chrome extensions cannot browse files directly. Please enter the path manually or use the default location.');\n}\n\n// Write configuration automatically\nasync function writeConfiguration() {\n  if (!selectedIDE) return;\n\n  const statusEl = document.getElementById('writeStatus');\n  if (!statusEl) return;\n\n  try {\n    // Validate project path first\n    const extensionPath = getExtensionPath();\n    if (extensionPath.includes('/path/to/') || extensionPath.includes('<YOUR_PROJECT_PATH>')) {\n      showStatus('error', '\u274C Please enter your actual Browser MCP project path first!');\n      const projectPathInput = document.getElementById('projectPath') as HTMLInputElement;\n      if (projectPathInput) {\n        projectPathInput.focus();\n        projectPathInput.style.borderColor = '#dc3545';\n        setTimeout(() => {\n          projectPathInput.style.borderColor = '';\n        }, 2000);\n      }\n      return;\n    }\n\n    showStatus('info', '\uD83D\uDD04 Writing configuration file...');\n\n    const ideConfig = IDE_CONFIGS[selectedIDE as keyof typeof IDE_CONFIGS];\n    const os = getOS();\n    const customConfigPath = (document.getElementById('customConfigPath') as HTMLInputElement)?.value.trim();\n    const configPath = customConfigPath || ideConfig.path[os];\n\n    // Store the project path for future use\n    localStorage.setItem('browserMCP_projectPath', extensionPath);\n\n    const config = ideConfig.config(extensionPath);\n\n    // Try native messaging first (automatic file writing)\n    try {\n      const port = chrome.runtime.connectNative('com.browser_mcp.native_host');\n\n      port.onMessage.addListener((response) => {\n        if (response.success) {\n          showStatus('success', `\u2705 Configuration written automatically!\\n\uD83D\uDCC1 ${response.path}\\n\\nRestart your IDE to load the new configuration.`);\n\n          // Auto-advance after showing the message\n          setTimeout(() => {\n            nextStep();\n          }, 3000);\n        } else {\n          console.error('Native host error:', response.error);\n          // Fall back to download method\n          fallbackToDownload(config, configPath, selectedIDE);\n        }\n      });\n\n      port.onDisconnect.addListener(() => {\n        const error = chrome.runtime.lastError;\n        console.log('Native host not available:', error?.message);\n        // Fall back to download method\n        fallbackToDownload(config, configPath, selectedIDE);\n      });\n\n      // Send write config request\n      port.postMessage({\n        type: 'WRITE_CONFIG',\n        path: configPath,\n        content: config,\n        merge: true // Merge with existing config\n      });\n\n    } catch (err) {\n      console.log('Native messaging not available, falling back to download');\n      fallbackToDownload(config, configPath, selectedIDE);\n    }\n  } catch (err) {\n    console.error('Download config error:', err);\n    showStatus('error', `\u274C Error: ${(err as Error).message}`);\n\n    // Show fallback\n    setTimeout(() => {\n      selectConfigMethod('manual');\n      showStatus('info', '\uD83D\uDCA1 Please use manual copy method instead.');\n    }, 3000);\n  }\n}\n\n// Show status message\nfunction showStatus(type: 'success' | 'error' | 'info', message: string) {\n  const statusEl = document.getElementById('writeStatus');\n  if (!statusEl) return;\n\n  statusEl.textContent = message;\n  statusEl.className = `status-message ${type}`;\n  statusEl.style.display = 'block';\n}\n\n// Initialize on load\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('Browser MCP Setup Wizard loaded');\n\n  // Setup event listeners\n\n  // Step 0: Get Started button\n  const getStartedBtn = document.getElementById('getStartedBtn');\n  if (getStartedBtn) {\n    getStartedBtn.addEventListener('click', nextStep);\n  }\n\n  // Step 1: IDE selection\n  document.querySelectorAll('.ide-option').forEach(el => {\n    el.addEventListener('click', () => {\n      const ide = el.getAttribute('data-ide');\n      if (ide) selectIDE(ide);\n    });\n  });\n\n  const backBtn1 = document.getElementById('backBtn1');\n  if (backBtn1) backBtn1.addEventListener('click', prevStep);\n\n  const continueBtn = document.getElementById('continueBtn');\n  if (continueBtn) continueBtn.addEventListener('click', nextStep);\n\n  // Step 2: Config method selection\n  document.querySelectorAll('.method-option').forEach(el => {\n    el.addEventListener('click', () => {\n      const method = el.getAttribute('data-method') as 'auto' | 'manual';\n      if (method) selectConfigMethod(method);\n    });\n  });\n\n  // Project path input - regenerate config when changed\n  const projectPathInput = document.getElementById('projectPath') as HTMLInputElement;\n  if (projectPathInput) {\n    // Load saved path\n    const saved = localStorage.getItem('browserMCP_projectPath');\n    if (saved) {\n      projectPathInput.value = saved;\n    }\n\n    // Regenerate config when path changes\n    projectPathInput.addEventListener('input', () => {\n      if (selectedIDE) {\n        generateConfig();\n      }\n    });\n  }\n\n  const detectBtn = document.getElementById('detectBtn');\n  if (detectBtn) detectBtn.addEventListener('click', detectProjectPath);\n\n  const writeConfigBtn = document.getElementById('writeConfigBtn');\n  if (writeConfigBtn) writeConfigBtn.addEventListener('click', writeConfiguration);\n\n  const copyBtn = document.getElementById('copyBtn');\n  if (copyBtn) copyBtn.addEventListener('click', copyConfig);\n\n  const backBtn2 = document.getElementById('backBtn2');\n  if (backBtn2) backBtn2.addEventListener('click', prevStep);\n\n  const doneConfigBtn = document.getElementById('doneConfigBtn');\n  if (doneConfigBtn) doneConfigBtn.addEventListener('click', nextStep);\n\n  // Step 3: Complete\n  const resetBtn = document.getElementById('resetBtn');\n  if (resetBtn) resetBtn.addEventListener('click', resetWizard);\n\n  const closeBtn = document.getElementById('closeBtn');\n  if (closeBtn) closeBtn.addEventListener('click', () => window.close());\n\n  // Detect current tab info\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n    if (tabs[0]) {\n      console.log('Current tab:', tabs[0].url);\n      // Extension is active for this tab\n    }\n  });\n});\n"],
  "mappings": ";AAIA,IAAI,cAAc;AAClB,IAAI,cAA6B;AAEjC,IAAM,cAAc;AAAA,EAClB,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,QAAQ,CAAC,mBAA2B;AAAA,MAClC,YAAY;AAAA,QACV,qBAAqB;AAAA,UACnB,SAAS;AAAA,UACT,MAAM,CAAC,aAAa;AAAA,UACpB,KAAK;AAAA,YACH,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,QAAQ,CAAC,mBAA2B;AAAA,MAClC,YAAY;AAAA,QACV,qBAAqB;AAAA,UACnB,SAAS;AAAA,UACT,MAAM,CAAC,aAAa;AAAA,UACpB,KAAK;AAAA,YACH,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,MACP,SAAS;AAAA,IACX;AAAA,IACA,QAAQ,CAAC,mBAA2B;AAAA,MAClC,YAAY;AAAA,QACV,qBAAqB;AAAA,UACnB,SAAS;AAAA,UACT,MAAM,CAAC,aAAa;AAAA,UACpB,KAAK;AAAA,YACH,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAGA,SAAS,QAAqC;AAC5C,QAAM,WAAW,UAAU,SAAS,YAAY;AAChD,MAAI,SAAS,SAAS,KAAK,EAAG,QAAO;AACrC,MAAI,SAAS,SAAS,OAAO,EAAG,QAAO;AACvC,SAAO;AACT;AAGA,SAAS,mBAA2B;AAClC,QAAM,mBAAmB,SAAS,eAAe,aAAa;AAC9D,MAAI,oBAAoB,iBAAiB,MAAM,KAAK,GAAG;AACrD,WAAO,iBAAiB,MAAM,KAAK;AAAA,EACrC;AAGA,QAAM,SAAS,aAAa,QAAQ,wBAAwB;AAC5D,MAAI,QAAQ;AACV,WAAO;AAAA,EACT;AAGA,SAAO;AACT;AAGA,eAAe,oBAAoB;AACjC,QAAM,mBAAmB,SAAS,eAAe,aAAa;AAC9D,MAAI,CAAC,iBAAkB;AAGvB,QAAM,cAAc;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,aAAW,QAAQ,4CAAqC;AAGxD,QAAM,YAAY,YAAY,CAAC;AAC/B,mBAAiB,QAAQ;AAEzB,aAAW,QAAQ,iEAA0D;AAG7E,eAAa,QAAQ,0BAA0B,SAAS;AAGxD,iBAAe;AACjB;AAGA,SAAS,WAAW;AAClB,MAAI,cAAc,GAAG;AACnB,UAAM,gBAAgB,SAAS,cAAc,oBAAoB,WAAW,IAAI;AAChF,UAAM,aAAa,SAAS,cAAc,wBAAwB,WAAW,IAAI;AAEjF,QAAI,cAAe,eAAc,UAAU,OAAO,QAAQ;AAC1D,QAAI,YAAY;AACd,iBAAW,UAAU,OAAO,QAAQ;AACpC,iBAAW,UAAU,IAAI,WAAW;AAAA,IACtC;AAEA;AAEA,UAAM,aAAa,SAAS,cAAc,oBAAoB,WAAW,IAAI;AAC7E,UAAM,UAAU,SAAS,cAAc,wBAAwB,WAAW,IAAI;AAE9E,QAAI,WAAY,YAAW,UAAU,IAAI,QAAQ;AACjD,QAAI,QAAS,SAAQ,UAAU,IAAI,QAAQ;AAG3C,QAAI,gBAAgB,KAAK,aAAa;AACpC,qBAAe;AAAA,IACjB;AAAA,EACF;AACF;AAEA,SAAS,WAAW;AAClB,MAAI,cAAc,GAAG;AACnB,UAAM,gBAAgB,SAAS,cAAc,oBAAoB,WAAW,IAAI;AAChF,UAAM,aAAa,SAAS,cAAc,wBAAwB,WAAW,IAAI;AAEjF,QAAI,cAAe,eAAc,UAAU,OAAO,QAAQ;AAC1D,QAAI,WAAY,YAAW,UAAU,OAAO,QAAQ;AAEpD;AAEA,UAAM,aAAa,SAAS,cAAc,oBAAoB,WAAW,IAAI;AAC7E,UAAM,UAAU,SAAS,cAAc,wBAAwB,WAAW,IAAI;AAE9E,QAAI,WAAY,YAAW,UAAU,IAAI,QAAQ;AACjD,QAAI,SAAS;AACX,cAAQ,UAAU,IAAI,QAAQ;AAC9B,cAAQ,UAAU,OAAO,WAAW;AAAA,IACtC;AAAA,EACF;AACF;AAEA,SAAS,cAAc;AACrB,gBAAc;AACd,gBAAc;AAGd,WAAS,iBAAiB,OAAO,EAAE,QAAQ,CAAC,IAAI,UAAU;AACxD,QAAI,UAAU,GAAG;AACf,SAAG,UAAU,IAAI,QAAQ;AAAA,IAC3B,OAAO;AACL,SAAG,UAAU,OAAO,QAAQ;AAAA,IAC9B;AAAA,EACF,CAAC;AAGD,WAAS,iBAAiB,WAAW,EAAE,QAAQ,CAAC,IAAI,UAAU;AAC5D,OAAG,UAAU,OAAO,UAAU,WAAW;AACzC,QAAI,UAAU,GAAG;AACf,SAAG,UAAU,IAAI,QAAQ;AAAA,IAC3B;AAAA,EACF,CAAC;AAGD,WAAS,iBAAiB,aAAa,EAAE,QAAQ,QAAM;AACrD,OAAG,UAAU,OAAO,UAAU;AAAA,EAChC,CAAC;AAED,QAAM,cAAc,SAAS,eAAe,aAAa;AACzD,MAAI,YAAa,aAAY,WAAW;AAC1C;AAGA,SAAS,UAAU,KAAa;AAC9B,gBAAc;AAGd,WAAS,iBAAiB,aAAa,EAAE,QAAQ,QAAM;AACrD,QAAI,GAAG,aAAa,UAAU,MAAM,KAAK;AACvC,SAAG,UAAU,IAAI,UAAU;AAAA,IAC7B,OAAO;AACL,SAAG,UAAU,OAAO,UAAU;AAAA,IAChC;AAAA,EACF,CAAC;AAGD,QAAM,cAAc,SAAS,eAAe,aAAa;AACzD,MAAI,YAAa,aAAY,WAAW;AAC1C;AAGA,SAAS,iBAAiB;AACxB,MAAI,CAAC,YAAa;AAElB,QAAM,YAAY,YAAY,WAAuC;AACrE,QAAM,KAAK,MAAM;AACjB,QAAM,gBAAgB,iBAAiB;AACvC,QAAM,cAAc,UAAU,KAAK,EAAE;AAGrC,QAAM,eAAe,SAAS,eAAe,YAAY;AACzD,MAAI,cAAc;AAChB,iBAAa,cAAc;AAAA,EAC7B;AAEA,QAAM,sBAAsB,SAAS,eAAe,mBAAmB;AACvE,MAAI,qBAAqB;AACvB,wBAAoB,cAAc;AAAA,EACpC;AAGA,QAAM,SAAS,UAAU,OAAO,aAAa;AAC7C,QAAM,aAAa,KAAK,UAAU,QAAQ,MAAM,CAAC;AAGjD,QAAM,kBAAkB,SAAS,eAAe,eAAe;AAC/D,MAAI,iBAAiB;AACnB,oBAAgB,YAAY,QAAQ,WAAW,UAAU,CAAC;AAAA,EAC5D;AAGA,QAAM,eAAe,SAAS,eAAe,cAAc;AAC3D,MAAI,cAAc;AAChB,iBAAa,cAAc,UAAU;AAAA,EACvC;AACF;AAGA,eAAe,aAAa;AAC1B,MAAI,CAAC,YAAa;AAElB,QAAM,YAAY,YAAY,WAAuC;AACrE,QAAM,gBAAgB,iBAAiB;AACvC,QAAM,SAAS,UAAU,OAAO,aAAa;AAC7C,QAAM,aAAa,KAAK,UAAU,QAAQ,MAAM,CAAC;AAEjD,MAAI;AACF,UAAM,UAAU,UAAU,UAAU,UAAU;AAG9C,UAAM,WAAW,SAAS,eAAe,UAAU;AACnD,UAAM,UAAU,SAAS,cAAc,WAAW;AAElD,QAAI,SAAU,UAAS,cAAc;AACrC,QAAI,QAAS,SAAQ,UAAU,IAAI,QAAQ;AAE3C,eAAW,MAAM;AACf,UAAI,SAAU,UAAS,cAAc;AACrC,UAAI,QAAS,SAAQ,UAAU,OAAO,QAAQ;AAAA,IAChD,GAAG,GAAI;AAAA,EACT,SAAS,KAAK;AACZ,YAAQ,MAAM,mBAAmB,GAAG;AACpC,UAAM,oDAAoD;AAAA,EAC5D;AACF;AAGA,SAAS,WAAW,MAAsB;AACxC,QAAM,MAAM,SAAS,cAAc,KAAK;AACxC,MAAI,cAAc;AAClB,SAAO,IAAI;AACb;AAGA,IAAI,eAAkC;AAGtC,SAAS,mBAAmB,QAA2B;AACrD,iBAAe;AAGf,WAAS,iBAAiB,gBAAgB,EAAE,QAAQ,QAAM;AACxD,QAAI,GAAG,aAAa,aAAa,MAAM,QAAQ;AAC7C,SAAG,UAAU,IAAI,UAAU;AAAA,IAC7B,OAAO;AACL,SAAG,UAAU,OAAO,UAAU;AAAA,IAChC;AAAA,EACF,CAAC;AAGD,QAAM,cAAc,SAAS,eAAe,mBAAmB;AAC/D,QAAM,gBAAgB,SAAS,eAAe,qBAAqB;AAEnE,MAAI,eAAe,eAAe;AAChC,QAAI,WAAW,QAAQ;AACrB,kBAAY,MAAM,UAAU;AAC5B,oBAAc,MAAM,UAAU;AAAA,IAChC,OAAO;AACL,kBAAY,MAAM,UAAU;AAC5B,oBAAc,MAAM,UAAU;AAG9B,UAAI,aAAa;AACf,cAAM,YAAY,YAAY,WAAuC;AACrE,cAAM,KAAK,MAAM;AACjB,cAAM,gBAAgB,iBAAiB;AAEvC,cAAM,mBAAmB,SAAS,eAAe,kBAAkB;AACnE,YAAI,kBAAkB;AACpB,2BAAiB,cAAc,UAAU,KAAK,EAAE;AAAA,QAClD;AAEA,cAAM,SAAS,UAAU,OAAO,aAAa;AAC7C,cAAM,aAAa,KAAK,UAAU,QAAQ,MAAM,CAAC;AAEjD,cAAM,sBAAsB,SAAS,eAAe,qBAAqB;AACzE,YAAI,qBAAqB;AACvB,8BAAoB,YAAY,QAAQ,WAAW,UAAU,CAAC;AAAA,QAChE;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAGA,SAAS,mBAAmB,QAAa,YAAoB,KAAa;AACxE,aAAW,QAAQ,yEAAkE;AAErF,aAAW,YAAY;AACrB,UAAM,aAAa,KAAK,UAAU,QAAQ,MAAM,CAAC;AAGjD,UAAM,OAAO,IAAI,KAAK,CAAC,UAAU,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAChE,UAAM,MAAM,IAAI,gBAAgB,IAAI;AACpC,UAAM,IAAI,SAAS,cAAc,GAAG;AACpC,MAAE,OAAO;AAGT,QAAI,WAAW;AACf,QAAI,QAAQ,UAAU;AACpB,iBAAW;AAAA,IACb,WAAW,QAAQ,UAAU;AAC3B,iBAAW;AAAA,IACb,WAAW,QAAQ,YAAY;AAC7B,iBAAW;AAAA,IACb;AAEA,MAAE,WAAW;AACb,aAAS,KAAK,YAAY,CAAC;AAC3B,MAAE,MAAM;AACR,aAAS,KAAK,YAAY,CAAC;AAC3B,QAAI,gBAAgB,GAAG;AAGvB,QAAI;AACF,YAAM,UAAU,UAAU,UAAU,UAAU;AAC9C,iBAAW,WAAW;AAAA,YAAsD,UAAU;AAAA;AAAA;AAAA;AAAA,0DAAsG;AAAA,IAC9L,QAAQ;AACN,iBAAW,WAAW,gCAA2B,QAAQ;AAAA;AAAA,cAAqB,UAAU;AAAA;AAAA,0DAAwD;AAAA,IAClJ;AAGA,eAAW,MAAM;AACf,eAAS;AAAA,IACX,GAAG,GAAI;AAAA,EACT,GAAG,GAAG;AACR;AAQA,eAAe,qBAAqB;AAClC,MAAI,CAAC,YAAa;AAElB,QAAM,WAAW,SAAS,eAAe,aAAa;AACtD,MAAI,CAAC,SAAU;AAEf,MAAI;AAEF,UAAM,gBAAgB,iBAAiB;AACvC,QAAI,cAAc,SAAS,WAAW,KAAK,cAAc,SAAS,qBAAqB,GAAG;AACxF,iBAAW,SAAS,iEAA4D;AAChF,YAAM,mBAAmB,SAAS,eAAe,aAAa;AAC9D,UAAI,kBAAkB;AACpB,yBAAiB,MAAM;AACvB,yBAAiB,MAAM,cAAc;AACrC,mBAAW,MAAM;AACf,2BAAiB,MAAM,cAAc;AAAA,QACvC,GAAG,GAAI;AAAA,MACT;AACA;AAAA,IACF;AAEA,eAAW,QAAQ,yCAAkC;AAErD,UAAM,YAAY,YAAY,WAAuC;AACrE,UAAM,KAAK,MAAM;AACjB,UAAM,mBAAoB,SAAS,eAAe,kBAAkB,GAAwB,MAAM,KAAK;AACvG,UAAM,aAAa,oBAAoB,UAAU,KAAK,EAAE;AAGxD,iBAAa,QAAQ,0BAA0B,aAAa;AAE5D,UAAM,SAAS,UAAU,OAAO,aAAa;AAG7C,QAAI;AACF,YAAM,OAAO,OAAO,QAAQ,cAAc,6BAA6B;AAEvE,WAAK,UAAU,YAAY,CAAC,aAAa;AACvC,YAAI,SAAS,SAAS;AACpB,qBAAW,WAAW;AAAA,YAA8C,SAAS,IAAI;AAAA;AAAA,gDAAqD;AAGtI,qBAAW,MAAM;AACf,qBAAS;AAAA,UACX,GAAG,GAAI;AAAA,QACT,OAAO;AACL,kBAAQ,MAAM,sBAAsB,SAAS,KAAK;AAElD,6BAAmB,QAAQ,YAAY,WAAW;AAAA,QACpD;AAAA,MACF,CAAC;AAED,WAAK,aAAa,YAAY,MAAM;AAClC,cAAM,QAAQ,OAAO,QAAQ;AAC7B,gBAAQ,IAAI,8BAA8B,OAAO,OAAO;AAExD,2BAAmB,QAAQ,YAAY,WAAW;AAAA,MACpD,CAAC;AAGD,WAAK,YAAY;AAAA,QACf,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA;AAAA,MACT,CAAC;AAAA,IAEH,SAAS,KAAK;AACZ,cAAQ,IAAI,0DAA0D;AACtE,yBAAmB,QAAQ,YAAY,WAAW;AAAA,IACpD;AAAA,EACF,SAAS,KAAK;AACZ,YAAQ,MAAM,0BAA0B,GAAG;AAC3C,eAAW,SAAS,iBAAa,IAAc,OAAO,EAAE;AAGxD,eAAW,MAAM;AACf,yBAAmB,QAAQ;AAC3B,iBAAW,QAAQ,kDAA2C;AAAA,IAChE,GAAG,GAAI;AAAA,EACT;AACF;AAGA,SAAS,WAAW,MAAoC,SAAiB;AACvE,QAAM,WAAW,SAAS,eAAe,aAAa;AACtD,MAAI,CAAC,SAAU;AAEf,WAAS,cAAc;AACvB,WAAS,YAAY,kBAAkB,IAAI;AAC3C,WAAS,MAAM,UAAU;AAC3B;AAGA,SAAS,iBAAiB,oBAAoB,MAAM;AAClD,UAAQ,IAAI,iCAAiC;AAK7C,QAAM,gBAAgB,SAAS,eAAe,eAAe;AAC7D,MAAI,eAAe;AACjB,kBAAc,iBAAiB,SAAS,QAAQ;AAAA,EAClD;AAGA,WAAS,iBAAiB,aAAa,EAAE,QAAQ,QAAM;AACrD,OAAG,iBAAiB,SAAS,MAAM;AACjC,YAAM,MAAM,GAAG,aAAa,UAAU;AACtC,UAAI,IAAK,WAAU,GAAG;AAAA,IACxB,CAAC;AAAA,EACH,CAAC;AAED,QAAM,WAAW,SAAS,eAAe,UAAU;AACnD,MAAI,SAAU,UAAS,iBAAiB,SAAS,QAAQ;AAEzD,QAAM,cAAc,SAAS,eAAe,aAAa;AACzD,MAAI,YAAa,aAAY,iBAAiB,SAAS,QAAQ;AAG/D,WAAS,iBAAiB,gBAAgB,EAAE,QAAQ,QAAM;AACxD,OAAG,iBAAiB,SAAS,MAAM;AACjC,YAAM,SAAS,GAAG,aAAa,aAAa;AAC5C,UAAI,OAAQ,oBAAmB,MAAM;AAAA,IACvC,CAAC;AAAA,EACH,CAAC;AAGD,QAAM,mBAAmB,SAAS,eAAe,aAAa;AAC9D,MAAI,kBAAkB;AAEpB,UAAM,QAAQ,aAAa,QAAQ,wBAAwB;AAC3D,QAAI,OAAO;AACT,uBAAiB,QAAQ;AAAA,IAC3B;AAGA,qBAAiB,iBAAiB,SAAS,MAAM;AAC/C,UAAI,aAAa;AACf,uBAAe;AAAA,MACjB;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,YAAY,SAAS,eAAe,WAAW;AACrD,MAAI,UAAW,WAAU,iBAAiB,SAAS,iBAAiB;AAEpE,QAAM,iBAAiB,SAAS,eAAe,gBAAgB;AAC/D,MAAI,eAAgB,gBAAe,iBAAiB,SAAS,kBAAkB;AAE/E,QAAM,UAAU,SAAS,eAAe,SAAS;AACjD,MAAI,QAAS,SAAQ,iBAAiB,SAAS,UAAU;AAEzD,QAAM,WAAW,SAAS,eAAe,UAAU;AACnD,MAAI,SAAU,UAAS,iBAAiB,SAAS,QAAQ;AAEzD,QAAM,gBAAgB,SAAS,eAAe,eAAe;AAC7D,MAAI,cAAe,eAAc,iBAAiB,SAAS,QAAQ;AAGnE,QAAM,WAAW,SAAS,eAAe,UAAU;AACnD,MAAI,SAAU,UAAS,iBAAiB,SAAS,WAAW;AAE5D,QAAM,WAAW,SAAS,eAAe,UAAU;AACnD,MAAI,SAAU,UAAS,iBAAiB,SAAS,MAAM,OAAO,MAAM,CAAC;AAGrE,SAAO,KAAK,MAAM,EAAE,QAAQ,MAAM,eAAe,KAAK,GAAG,CAAC,SAAS;AACjE,QAAI,KAAK,CAAC,GAAG;AACX,cAAQ,IAAI,gBAAgB,KAAK,CAAC,EAAE,GAAG;AAAA,IAEzC;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": []
}
